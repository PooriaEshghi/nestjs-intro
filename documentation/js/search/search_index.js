var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.778,1,3.05,2,1.45,3,0.525,4,0.452,5,0.452,6,3.303,7,0.644,8,0.039,9,0.962,10,2.622,11,3.303,12,0.525,13,0.026,14,2.209,15,1.778,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.648,2,1.326,3,0.337,4,0.29,5,0.29,7,0.688,8,0.039,9,0.619,10,2.518,11,2.124,12,0.337,13,0.017,16,0.024,17,0.024,18,1.544,19,3.513,20,1.143,21,1.143,22,1.42,23,1.42,24,1.143,25,2.352,26,1.42,27,2.124,28,2.124,29,2.124,30,2.518,31,2.813,32,2.265,33,2.02,34,1.42,35,1.271,36,2.579,37,2.275,38,2.579,39,2.579,40,2.579,41,2.579,42,2.579,43,2.124,44,2.579,45,2.579,46,0.687,47,3.67,48,2.579,49,2.579,50,1.823,51,2.579,52,2.579,53,2.579,54,1.823,55,2.579,56,2.579,57,2.579,58,2.579,59,2.124,60,2.579]],["title/injectables/AppService.html",[10,1.477,61,1.083]],["body/injectables/AppService.html",[3,0.503,4,0.433,5,0.433,7,0.503,8,0.038,9,0.922,10,2.361,12,0.503,13,0.025,16,0.031,17,0.031,61,1.732,62,2.116,63,3.165,64,0.827,65,2.361,66,5.465,67,1.135,68,3.845,69,1.894,70,1.566,71,1.894,72,3.845,73,3.845]],["title/controllers/AuthController.html",[0,1.083,74,1.858]],["body/controllers/AuthController.html",[0,1.442,2,1.442,3,0.522,4,0.449,5,0.449,7,0.641,8,0.038,9,0.957,12,0.522,13,0.026,14,2.197,15,1.769,16,0.032,17,0.032,74,3.04,75,3.285,76,2.821,77,3.991,78,2.353,79,3.285,80,3.991]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.524,3,0.412,4,0.355,5,0.355,7,0.663,8,0.039,9,0.756,12,0.412,13,0.02,16,0.027,17,0.027,18,1.716,20,1.398,21,1.398,22,1.736,23,1.736,24,1.398,25,2.615,26,2.615,30,2.736,32,1.868,33,2.321,34,1.736,35,1.554,37,1.955,74,2.944,78,2.598,79,2.596,81,2.596,82,2.596,83,2.596,84,3.154,85,2.614,86,3.154,87,2.596]],["title/injectables/AuthService.html",[61,1.083,78,1.329]],["body/injectables/AuthService.html",[3,0.367,4,0.316,5,0.316,7,0.509,8,0.039,9,0.673,12,0.367,13,0.018,15,1.243,16,0.025,17,0.025,46,1.037,50,1.983,54,3.16,61,1.407,62,1.544,64,0.603,65,1.918,67,1.32,69,1.918,70,1.844,71,1.918,78,1.725,85,1.739,88,2.309,89,2.89,90,3.976,91,3.893,92,2.752,93,2.309,94,2.153,95,2.805,96,2.143,97,2.143,98,1.557,99,2.805,100,2.805,101,3.893,102,2.461,103,2.805,104,1.983,105,2.309,106,2.309,107,2.309,108,2.309,109,1.983,110,1.544,111,2.805,112,2.805]],["title/classes/CreatePostDto.html",[13,0.019,113,1.65]],["body/classes/CreatePostDto.html",[3,0.177,4,0.153,5,0.153,7,0.515,8,0.039,12,0.177,13,0.018,16,0.014,17,0.014,46,1.377,50,2.337,64,0.291,67,1.371,70,1.644,98,1.944,113,1.23,114,0.601,115,3.365,116,0.958,117,1.263,118,2.347,119,2.851,120,2.851,121,3.582,122,2.851,123,2.851,124,3.658,125,2.015,126,2.851,127,2.347,128,2.058,129,1.355,130,1.355,131,1.355,132,1.355,133,2.05,134,1.355,135,2.234,136,1.839,137,1.839,138,2.234,139,1.355,140,1.355,141,1.355,142,2.234,143,1.845,144,2.722,145,3.307,146,1.263,147,1.385,148,1.839,149,1.355,150,1.355,151,2.234,152,1.839,153,2.234,154,2.234,155,2.234,156,2.44,157,2.234,158,2.234,159,1.355,160,1.355,161,1.116,162,2.234,163,2.234,164,2.851,165,2.234,166,2.234,167,1.355,168,1.355,169,1.355,170,3.307,171,3.307,172,1.839,173,2.234,174,2.234,175,2.234,176,2.234,177,2.234,178,2.851,179,1.355,180,3.011,181,1.839,182,1.839,183,1.839,184,1.355,185,1.355,186,1.355,187,1.355,188,3.307,189,1.355,190,1.355,191,1.355,192,2.851,193,1.355,194,2.234,195,2.234,196,2.267,197,2.943,198,2.586,199,2.234,200,1.116,201,1.116,202,2.234,203,0.668,204,0.958,205,0.958,206,0.958,207,1.355,208,3.241,209,3.241,210,0.668,211,1.355,212,1.355,213,1.355,214,2.234,215,1.116,216,1.355,217,1.355,218,1.116,219,1.355,220,1.355,221,1.355,222,1.116,223,0.958,224,0.958]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,133,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.455,4,0.392,5,0.392,7,0.455,8,0.038,12,0.455,13,0.029,16,0.029,17,0.029,46,1.199,64,0.749,67,1.329,70,1.47,114,1.543,115,3.524,117,1.994,128,1.994,133,2.789,146,2.209,196,3.267,198,3.18,203,1.715,206,3.524,223,3.524,224,3.524,225,2.866,226,3.481,227,3.481,228,3.481]],["title/classes/CreateUserDto.html",[13,0.019,229,1.65]],["body/classes/CreateUserDto.html",[3,0.34,4,0.292,5,0.292,7,0.34,8,0.038,12,0.34,13,0.024,16,0.024,17,0.024,46,1.244,54,3.032,64,0.559,67,1.379,70,1.759,98,1.475,104,3.032,114,1.151,117,1.635,128,2.069,172,3.037,196,2.894,197,2.607,198,3.3,200,2.138,201,2.138,203,1.28,222,3.037,229,2.03,230,4.059,231,1.836,232,3.531,233,4.289,234,2.598,235,2.598,236,2.598,237,2.598,238,2.598,239,2.598,240,2.598,241,4.669,242,3.688,243,3.688,244,3.688,245,3.688,246,3.688,247,5.123,248,3.688,249,2.03,250,3.688,251,3.688,252,2.598,253,3.688,254,2.598,255,3.688,256,2.598,257,2.598]],["title/classes/GetUsersParamDto.html",[13,0.019,258,1.65]],["body/classes/GetUsersParamDto.html",[3,0.429,4,0.369,5,0.369,7,0.634,8,0.039,12,0.429,13,0.031,16,0.028,17,0.028,46,1.29,64,0.705,67,0.969,70,1.414,98,1.73,102,2.947,110,2.382,114,1.454,117,1.918,128,1.454,143,1.454,156,2.683,161,2.7,197,3.059,203,1.616,204,2.318,209,3.563,210,1.616,249,1.806,258,2.382,259,3.563,260,2.683,261,2.7,262,4.328,263,3.28,264,3.28,265,3.563,266,2.7]],["title/classes/PatchPostDto.html",[13,0.019,267,1.858]],["body/classes/PatchPostDto.html",[3,0.439,4,0.378,5,0.378,7,0.641,8,0.038,12,0.439,13,0.028,16,0.028,17,0.028,46,0.894,64,0.722,67,0.991,102,2.86,113,1.847,114,1.487,116,2.371,117,1.946,128,1.487,143,1.487,146,1.946,152,2.762,196,2.723,203,1.653,205,2.371,208,3.616,210,1.653,249,1.847,265,3.616,267,2.723,268,3.616,269,3.616,270,4.392,271,4.392,272,3.355,273,3.355,274,2.762,275,2.762,276,2.762,277,3.355]],["title/classes/PatchUserDto.html",[13,0.019,278,1.858]],["body/classes/PatchUserDto.html",[3,0.525,4,0.452,5,0.452,7,0.644,8,0.038,12,0.525,13,0.026,16,0.032,17,0.032,114,1.778,205,2.836,229,2.209,231,2.836,269,4.051,274,3.303,278,3.05,279,3.303,280,4.92,281,3.303,282,3.303,283,3.303]],["title/controllers/PostsController.html",[0,1.083,284,1.858]],["body/controllers/PostsController.html",[0,0.81,2,0.81,3,0.293,4,0.252,5,0.252,7,0.608,8,0.039,9,0.538,12,0.293,13,0.014,14,1.234,15,0.994,16,0.021,17,0.021,46,1.051,64,0.482,65,1.633,67,1.165,69,1.943,70,1.289,71,1.105,76,1.585,89,2.907,96,2.171,97,2.171,98,1.577,113,2.68,125,2.343,128,1.748,143,1.469,146,2.158,210,1.105,267,3.018,275,2.729,276,2.729,284,2.055,285,1.846,286,2.242,287,3.315,288,3.315,289,3.315,290,2.242,291,3.315,292,4.358,293,4.358,294,3.315,295,2.242,296,2.242,297,3.315,298,2.242,299,3.315,300,2.242,301,2.729,302,2.242,303,3.588,304,2.242,305,2.242,306,1.846,307,1.846,308,2.729,309,1.943,310,1.846,311,3.247,312,1.846,313,1.846,314,1.846,315,2.242,316,2.242,317,2.242,318,2.242,319,2.242,320,2.729,321,2.242,322,2.242,323,2.242,324,2.242]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.546,3,0.422,4,0.363,5,0.363,7,0.669,8,0.038,9,0.773,12,0.422,13,0.021,16,0.028,17,0.028,18,1.735,20,1.428,21,1.428,22,1.774,23,1.774,24,1.428,25,2.643,26,1.774,31,3.121,32,2.425,33,2.355,34,1.774,35,1.588,37,2.652,87,2.653,284,2.976,309,2.696,310,2.653,325,2.653,326,3.222,327,2.653,328,3.222,329,3.222]],["title/injectables/PostsService.html",[61,1.083,309,1.477]],["body/injectables/PostsService.html",[3,0.383,4,0.33,5,0.33,7,0.524,8,0.039,9,0.702,12,0.383,13,0.019,14,1.612,15,1.298,16,0.026,17,0.026,46,1.068,61,1.449,62,1.612,64,0.63,65,1.975,67,1.184,69,1.443,70,1.494,71,1.443,89,2.517,92,2.07,93,2.41,94,2.127,96,2.207,97,2.207,98,1.603,102,1.612,106,2.41,109,2.07,110,2.928,118,3.765,127,3.765,301,3.301,309,1.975,330,2.41,331,4.01,332,2.928,333,4.01,334,2.928,335,2.928,336,2.928,337,4.049,338,2.928,339,2.928]],["title/controllers/UsersController.html",[0,1.083,340,1.858]],["body/controllers/UsersController.html",[0,0.621,2,0.621,3,0.225,4,0.194,5,0.194,7,0.574,8,0.038,9,0.412,12,0.225,13,0.011,14,0.946,15,0.762,16,0.018,17,0.018,46,1.1,64,0.37,65,1.333,67,0.988,69,1.649,70,0.884,71,2.161,76,1.215,89,1.842,94,1.082,96,1.842,97,1.842,98,1.338,110,1.49,125,1.215,128,1.483,136,2.228,137,2.228,143,1.944,146,1.683,147,2.845,156,2.354,210,0.847,229,2.526,249,2.858,258,1.842,260,2.56,278,2.947,281,2.228,303,2.228,306,1.415,307,2.228,308,2.755,311,2.228,312,1.415,313,1.415,314,1.415,320,2.228,340,1.678,341,1.415,342,2.706,343,3.347,344,2.706,345,1.719,346,1.719,347,1.719,348,3.4,349,1.719,350,2.706,351,2.706,352,2.706,353,1.719,354,2.706,355,2.228,356,1.719,357,2.706,358,2.706,359,2.706,360,3.797,361,1.719,362,2.706,363,2.706,364,2.706,365,2.706,366,1.719,367,1.415,368,2.228,369,1.719,370,1.719,371,1.719,372,1.719,373,1.719,374,2.706,375,1.719,376,1.719,377,1.415,378,1.415,379,1.415,380,2.706,381,3.347,382,1.719,383,1.719,384,1.719,385,1.719,386,1.719,387,1.415,388,1.719,389,2.706,390,2.706,391,1.719,392,1.719,393,1.719,394,1.719,395,1.719,396,1.719,397,1.719,398,1.719,399,1.719,400,1.719,401,1.719,402,1.719,403,1.719,404,1.719,405,1.719,406,1.719,407,1.719,408,1.719]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.524,3,0.412,4,0.355,5,0.355,7,0.663,8,0.039,9,0.756,12,0.412,13,0.02,16,0.027,17,0.027,18,1.716,20,1.398,21,1.398,22,1.736,23,1.736,24,1.398,25,2.615,26,2.615,30,2.077,32,2.461,33,2.321,34,1.736,35,1.554,37,1.955,85,2.614,94,2.344,340,2.944,379,2.596,409,2.596,410,2.596,411,2.596,412,3.154,413,3.154,414,3.154]],["title/injectables/UsersService.html",[61,1.083,94,1.199]],["body/injectables/UsersService.html",[3,0.294,4,0.253,5,0.253,7,0.517,8,0.039,9,0.539,12,0.294,13,0.015,15,0.997,16,0.021,17,0.021,46,1.053,61,1.201,62,1.238,64,0.484,65,1.637,67,1.167,69,1.637,70,1.593,71,1.947,78,2.235,85,1.394,89,2.175,90,1.851,92,2.348,94,1.329,96,2.175,97,2.175,98,1.58,102,2.403,104,3.085,105,1.851,107,1.851,108,1.851,109,2.348,110,1.829,147,2.449,232,3.593,249,2.683,258,2.403,260,1.394,266,1.851,348,3.253,367,2.735,368,2.735,377,1.851,378,1.851,415,1.851,416,3.951,417,3.322,418,2.249,419,2.249,420,2.249,421,2.249,422,3.322,423,2.249,424,3.322,425,3.322,426,3.322,427,2.249,428,2.249,429,2.249,430,3.322,431,3.322,432,2.249,433,2.249,434,2.249]],["title/coverage.html",[435,2.88]],["body/coverage.html",[0,1.74,1,1.726,5,0.313,6,2.292,8,0.038,10,1.372,13,0.034,16,0.025,17,0.025,24,1.234,46,0.742,61,1.74,63,2.292,74,1.726,75,2.292,78,1.234,88,2.292,94,1.113,113,1.533,115,2.737,116,2.737,133,1.726,146,1.234,206,1.968,225,2.292,229,1.533,230,2.292,231,2.737,258,1.533,259,2.292,260,1.726,261,2.292,267,1.726,268,2.292,278,1.726,279,2.292,284,1.726,285,2.292,309,1.372,330,2.292,340,1.726,341,2.292,415,2.292,435,1.968,436,2.292,437,2.784,438,2.784,439,5.857,440,4.814,441,4.453,442,4.814,443,2.292,444,2.784,445,3.873,446,2.784,447,2.784,448,2.784,449,2.784,450,2.784]],["title/dependencies.html",[21,1.596,451,2.068]],["body/dependencies.html",[8,0.039,9,0.876,13,0.03,16,0.03,17,0.03,21,1.619,43,3.008,203,1.8,204,2.583,210,1.8,282,3.008,283,3.008,452,3.654,453,3.654,454,5.1,455,3.654,456,3.654,457,3.654,458,3.654,459,3.654,460,3.654,461,3.654,462,3.654,463,3.654,464,3.654,465,3.654,466,3.654,467,3.654,468,3.654,469,3.654,470,3.654,471,3.654]],["title/miscellaneous/enumerations.html",[472,1.557,473,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,64,0.794,121,3.845,146,2.07,147,2.895,148,3.845,180,3.845,181,3.845,182,3.845,183,3.845,215,3.845,218,3.845,224,4.122,472,2.288,473,3.038,474,3.691,475,3.691,476,3.691,477,3.691]],["title/miscellaneous/functions.html",[472,1.557,478,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.471,64,0.963,443,3.684,472,2.774,478,3.684,479,4.475]],["title/index.html",[64,0.54,480,2.512,481,2.512]],["body/index.html",[4,0.209,8,0.036,16,0.019,17,0.019,35,2.232,59,4.018,143,0.823,144,1.529,156,2.455,223,1.313,337,2.367,355,1.529,387,3.729,435,1.313,436,2.367,482,1.857,483,1.857,484,3.517,485,2.875,486,1.857,487,1.857,488,1.857,489,1.857,490,2.875,491,3.517,492,1.857,493,1.857,494,1.857,495,3.96,496,1.857,497,4.88,498,1.857,499,4.724,500,1.857,501,1.857,502,1.857,503,2.875,504,1.857,505,2.875,506,1.857,507,3.517,508,1.857,509,1.857,510,1.857,511,1.857,512,1.857,513,1.857,514,3.96,515,2.875,516,1.857,517,1.857,518,1.857,519,1.857,520,4.529,521,2.875,522,3.96,523,1.857,524,2.875,525,1.857,526,2.875,527,4.529,528,3.96,529,1.857,530,2.875,531,1.857,532,1.857,533,1.857,534,1.857,535,3.96,536,1.857,537,1.857,538,1.857,539,1.857,540,2.875,541,1.857,542,1.857,543,1.857,544,1.857,545,1.857,546,2.875,547,1.857,548,1.857,549,1.857,550,2.875,551,1.857,552,1.857,553,3.26,554,2.875,555,1.857,556,1.857,557,1.857,558,1.857,559,1.857,560,1.857,561,1.857,562,1.857,563,2.875,564,1.857,565,1.857,566,1.857,567,1.857,568,3.517,569,1.857,570,1.857,571,1.857,572,1.857,573,1.857,574,1.857,575,2.875,576,1.857,577,1.857,578,1.857,579,1.857,580,1.857,581,2.875,582,1.857,583,1.857,584,1.857,585,2.875,586,2.875,587,1.857,588,1.857,589,1.857,590,1.857,591,1.857,592,1.857,593,1.857,594,1.857,595,1.857,596,1.857,597,1.857,598,1.529,599,1.857,600,1.857,601,1.857,602,1.857,603,1.857,604,1.857,605,1.529]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.032,16,0.032,17,0.032,19,2.571,20,1.838,30,2.044,31,2.283,32,1.838,553,4.619,606,5.611,607,5.611,608,5.611]],["title/overview.html",[609,3.355]],["body/overview.html",[2,1.075,8,0.038,10,2.272,16,0.026,17,0.026,18,1.075,19,3.539,20,1.319,21,1.319,22,1.638,23,1.638,24,1.319,25,1.638,26,1.638,27,2.449,28,2.449,29,2.449,30,2.634,31,3.011,32,2.424,33,2.232,34,1.638,35,1.466,62,1.638,78,2.424,81,2.449,82,2.449,83,2.449,94,2.187,114,1.319,309,2.272,325,2.449,327,2.449,409,2.449,410,2.449,411,2.449,609,2.449,610,4.611,611,2.975]],["title/properties.html",[117,1.596,451,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,117,1.948,143,1.948,598,3.618,605,3.618,612,4.395,613,4.395,614,4.395]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":613,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.26",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["10})@apiquery({name",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.0",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["11.0.7",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":266,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":263,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.1.0",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":610,"title":{},"body":{"overview.html":{}}}],["5432",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":611,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["8.14.1",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["all'endpoint",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["allowing",{"_index":541,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":591,"title":{},"body":{"index.html":{}}}],["api",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isarray()@isoptional()@isstring({each",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":490,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":74,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":598,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":78,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":530,"title":{},"body":{"index.html":{}}}],["backers",{"_index":592,"title":{},"body":{"index.html":{}}}],["based",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":584,"title":{},"body":{"index.html":{}}}],["body",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":608,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":606,"title":{},"body":{"modules.html":{}}}],["building",{"_index":485,"title":{},"body":{"index.html":{}}}],["channel",{"_index":556,"title":{},"body":{"index.html":{}}}],["character",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":520,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":540,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":525,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":325,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":326,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":327,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":547,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["console.log(\"found",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(createpostdto",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content1",{"_index":339,"title":{},"body":{"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/posts",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":562,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":435,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":113,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":133,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":229,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":558,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10),parseintpipe",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":514,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":529,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":521,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":539,"title":{},"body":{"index.html":{}}}],["description",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["description:\"a",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["description:\"you",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":500,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":570,"title":{},"body":{"index.html":{}}}],["discord",{"_index":555,"title":{},"body":{"index.html":{}}}],["dive",{"_index":557,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":436,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":509,"title":{},"body":{"index.html":{}}}],["each",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":486,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":519,"title":{},"body":{"index.html":{}}}],["eight",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":517,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":574,"title":{},"body":{"index.html":{}}}],["entities",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["entries",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":473,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":560,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":533,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":543,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":535,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["fineduserbyid",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{}}}],["fineduserbyid(userid",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["firstname",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":542,"title":{},"body":{"index.html":{}}}],["follow",{"_index":578,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":484,"title":{},"body":{"index.html":{}}}],["full",{"_index":573,"title":{},"body":{"index.html":{}}}],["function",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":478,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":538,"title":{},"body":{"index.html":{}}}],["get('/:userid",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":480,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserparamdto:getusersparamdto",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":258,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":565,"title":{},"body":{"index.html":{}}}],["grow",{"_index":588,"title":{},"body":{"index.html":{}}}],["hai",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["hands",{"_index":559,"title":{},"body":{"index.html":{}}}],["handy",{"_index":548,"title":{},"body":{"index.html":{}}}],["headers",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":563,"title":{},"body":{"index.html":{}}}],["here",{"_index":596,"title":{},"body":{"index.html":{}}}],["host",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":602,"title":{},"body":{"index.html":{}}}],["id",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["id:number",{"_index":277,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["identifier",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":523,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":545,"title":{},"body":{"index.html":{}}}],["inject",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":61,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":537,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":498,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":566,"title":{},"body":{"index.html":{}}}],["inviato",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["ip",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":265,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":226,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":581,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":583,"title":{},"body":{"index.html":{}}}],["john",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":594,"title":{},"body":{"index.html":{}}}],["json",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":599,"title":{},"body":{"index.html":{}}}],["key",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":551,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":605,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":586,"title":{},"body":{"index.html":{}}}],["limit",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":580,"title":{},"body":{"index.html":{}}}],["list",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":524,"title":{},"body":{"index.html":{}}}],["loop",{"_index":576,"title":{},"body":{"index.html":{}}}],["makes",{"_index":531,"title":{},"body":{"index.html":{}}}],["managing",{"_index":544,"title":{},"body":{"index.html":{}}}],["matches",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":527,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":472,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":585,"title":{},"body":{"index.html":{}}}],["mode",{"_index":503,"title":{},"body":{"index.html":{}}}],["modifypost",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["modifypost(@body",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["modifypost(patchpostdto",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":522,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":600,"title":{},"body":{"index.html":{}}}],["name",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["name:'limit",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["name:'page",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["need",{"_index":571,"title":{},"body":{"index.html":{}}}],["needs",{"_index":271,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":491,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":604,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":282,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["node.js",{"_index":483,"title":{},"body":{"index.html":{}}}],["npm",{"_index":497,"title":{},"body":{"index.html":{}}}],["number",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":582,"title":{},"body":{"index.html":{}}}],["official",{"_index":528,"title":{},"body":{"index.html":{}}}],["one",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":587,"title":{},"body":{"index.html":{}}}],["optional",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":225,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":227,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":228,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":609,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":451,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":261,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:14",{"_index":264,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":572,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":274,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":280,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":267,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":278,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":526,"title":{},"body":{"index.html":{}}}],["please",{"_index":554,"title":{},"body":{"index.html":{}}}],["pooria84",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post.dto",{"_index":275,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":273,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:25",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:33",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:70",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":329,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":284,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":309,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":505,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":482,"title":{},"body":{"index.html":{}}}],["project",{"_index":495,"title":{},"body":{"index.html":{}}}],["properties",{"_index":117,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit',new",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page',new",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":552,"title":{},"body":{"index.html":{}}}],["read",{"_index":595,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":513,"title":{},"body":{"index.html":{}}}],["real",{"_index":567,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":494,"title":{},"body":{"index.html":{}}}],["req",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["required:false",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["requiring",{"_index":534,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":546,"title":{},"body":{"index.html":{}}}],["response",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["richiesta",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["run",{"_index":499,"title":{},"body":{"index.html":{}}}],["runs",{"_index":518,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":487,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["serialize",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":488,"title":{},"body":{"index.html":{}}}],["setup",{"_index":496,"title":{},"body":{"index.html":{}}}],["side",{"_index":489,"title":{},"body":{"index.html":{}}}],["simple",{"_index":536,"title":{},"body":{"index.html":{}}}],["slug",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["something",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":262,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":590,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":414,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":443,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":328,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:7",{"_index":334,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":259,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":279,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:7",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:35",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":412,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":501,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":504,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":506,"title":{},"body":{"index.html":{}}}],["started",{"_index":481,"title":{"index.html":{}},"body":{}}],["starter",{"_index":493,"title":{},"body":{"index.html":{}}}],["statements",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":575,"title":{},"body":{"index.html":{}}}],["steps",{"_index":515,"title":{},"body":{"index.html":{}}}],["story",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":532,"title":{},"body":{"index.html":{}}}],["string",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":553,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":607,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":516,"title":{},"body":{"index.html":{}}}],["test",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":511,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":510,"title":{},"body":{"index.html":{}}}],["tests",{"_index":507,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":589,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.fineduserbyid(userid",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getuserparamdto.id",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":568,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title1",{"_index":338,"title":{},"body":{"injectables/PostsService.html":{}}}],["touch",{"_index":597,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":603,"title":{},"body":{"index.html":{}}}],["type",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type:'number",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["typeorm",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["typeormmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forrootasync",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":283,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":492,"title":{},"body":{"index.html":{}}}],["una",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":508,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":614,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":276,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":272,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updates",{"_index":577,"title":{},"body":{"index.html":{}}}],["url",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":281,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":260,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":413,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":340,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":94,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":569,"title":{},"body":{"index.html":{}}}],["valid",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":612,"title":{},"body":{"properties.html":{}}}],["video",{"_index":561,"title":{},"body":{"index.html":{}}}],["visit",{"_index":550,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":564,"title":{},"body":{"index.html":{}}}],["void",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":502,"title":{},"body":{"index.html":{}}}],["website",{"_index":601,"title":{},"body":{"index.html":{}}}],["went",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["without",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":549,"title":{},"body":{"index.html":{}}}],["world",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["x",{"_index":579,"title":{},"body":{"index.html":{}}}],["yes",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":593,"title":{},"body":{"index.html":{}}}],["you're",{"_index":512,"title":{},"body":{"index.html":{}}}],["z0",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      useFactory: () => ({\n        type: 'postgres',\n        entities: [],\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'pooria84',\n        host: 'localhost',\n        database: 'nestjs-blog',\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    return 'SAMPLE_TOKEN';\n  }\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { PostType } from '../enums/postType.enum';\nimport { PostStatus } from '../enums/postStatus.enum';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n        },\n        value: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    Matches,\n    MaxLength,\n    MinLength,\n  } from 'class-validator';\n  \n  export class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n  \n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n  \n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n      message:\n        'Minimum eight characters, at least one letter, one number and one special character',\n    })\n    password: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'The ID of the post that needs to be updated'\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id:number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    Public\n                                modifyPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        modifyPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    modifyPost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('/posts')\n@ApiTags('Posts')\nexport class PostsController {\n    constructor(private readonly postsService: PostsService){}\n\n    @Get('/:userId')\n    public getPosts(@Param('userId') userId : string) {\n        return this.postsService.finedUserById(userId);\n    }\n\n    @ApiResponse({\n        status: 201,\n        description:\"You get a 201 response if your post is created successfully\",\n\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto){\n        console.log(createPostDto);\n        \n    }\n    @ApiResponse({\n        status: 200,\n        description:\"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public modifyPost(@Body() patchPostDto: PatchPostDto){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                finedUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        finedUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    finedUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n    constructor(private readonly usersService: UsersService){}\n    public finedUserById(userId: string){\n        const user = this.usersService.findOneById(userId);\n        console.log(\"found user with id: \"+ userId);\n\n        return [\n            {\n                user: user,\n                title: 'Test Title',\n                content: 'test Content'\n            },\n            {\n                user: user,\n                title: 'Test Title1',\n                content: 'test Content1'\n            }\n        ]\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit?: number, page?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'User fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, Req, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n    constructor(private readonly userService: UsersService){}\n\n    @Get(':id')\n    @ApiOperation({\n        summary: 'Fetches a list of registered users on the application'\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"User fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name:'limit',\n        type:'number',\n        required:false,\n        description: 'The number of entries returned per query',\n        example: 10\n    })\n    @ApiQuery({\n        name:'page',\n        type:'number',\n        required:false,\n        description: 'The position of the page number that you want the API to return',\n        example: 1\n    })\n    getUsers(\n        @Param() getUserParamDto:GetUsersParamDto, \n        @Query('limit',new DefaultValuePipe(10),ParseIntPipe) limit?: number, \n        @Query('page',new DefaultValuePipe(1), ParseIntPipe) page?: number\n    ) {\n        return this.userService.findAll(getUserParamDto, limit, page)\n        // return this.userService.findAll(getUserParamDto.id as string);\n    }\n    \n\n    @Post()\n    createUsers(@Body() createUserDto: CreateUserDto) {\n        console.log(createUserDto instanceof CreateUserDto);\n        \n        \n        return \"Hai inviato una richiesta POST all'endpoint users\";\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n      return patchUserDto;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit?: number, page?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; firstName: string; email: string; } | \"something went wrong\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\n\n\n@Injectable()\nexport class UsersService {\n\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authservice: AuthService\n  ) { }\n\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit?: number,\n    page?: number,\n  ) {\n    const isAuth = this.authservice.isAuth();\n    console.log(isAuth);\n    \n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  findOneById(id: string) {\n    const user = {\n      id: '1234',\n      firstName: 'John',\n      email: 'john@doe.com',\n    }\n    if (id === user.id) {\n      return user;\n\n    } else {\n      return \"something went wrong\"\n    }\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.0.7\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.21\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
